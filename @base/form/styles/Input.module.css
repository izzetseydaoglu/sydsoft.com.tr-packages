.component {
    position: relative;
    display: flex;
    flex-direction: row;
    align-items: center;
    vertical-align: top;
    width: 100%;
    border-width: 1px;
    border-style: solid;
    border-color: rgb(206, 212, 218);
    box-shadow: none;
    background: #ffffff;
    transition: 0.2s ease all;
    border-radius: 6px;
}

.component[data-disabled="true"] {
    background: #ebebeb;
}

.component[data-disabled="true"],
.component[data-disabled="true"] * {
    pointer-events: none;
    cursor: not-allowed;
}

.component.error {
    border-color: #e70b3978;
    box-shadow: 0px 0px 5px 2px #f40d0d3d;
}

.component:hover {
    border-color: rgba(63, 77, 103, 0.87);
}

.component:focus-within {
    box-shadow: inset 0 0 0 1px rgb(63 77 103 / 87%);
}

.hidePlaceHolder input:not(:focus)::placeholder {
    color: transparent;
}

.component[data-disabled="true"] .loading:before {
    background: #ebebeb;
}

.adornment {
    z-index: 1;
    height: 0.01em;
    max-height: 2em;
    display: flex;
    flex-direction: row;
    align-items: center;
    flex: 0 0 auto;
    flex-wrap: nowrap;
    white-space: nowrap;
}

.adornment.start {
    margin-left: 10px;
    margin-right: -10px;
}

.adornment.end {
    margin-left: -5px;
    margin-right: 10px;
}

.inputBase {
    position: relative;
    display: inline-flex;
    flex-direction: row;
    align-items: center;
    flex: 1;
    overflow: hidden;
    z-index: 0;
}

.label {
    transition: 0.2s ease all;
    color: #000;
    padding: 0;
    display: block;
    transform-origin: left top;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: calc(100% - 20px);
    position: absolute;
    left: 14px;
    top: 48%;
    transform: translateY(-50%) scale(1);
    pointer-events: none;
    opacity: 0.5;
}
.required {
    margin-left: 4px;
    color: #ff0202;
}

.inputBase.open {
    position: unset;
}

.inputBase.open .label {
    background: linear-gradient(0deg, var(--label-bg, #ffffff) 50%, rgba(255, 255, 255, 0) 50%);
    transform: translateY(-50%) scale(0.75);
    top: 1px;
    left: 8px;
    padding: 0 10px;
    color: #3f4d67;
    opacity: 1;
    z-index: 2;
}

.input {
    font-size: 1rem;
    line-height: 1.8rem;
    letter-spacing: inherit;
    color: currentcolor;
    box-sizing: content-box;
    background: none;
    margin: 0;
    display: block;
    min-width: 0;
    width: 100%;
    padding: 12px 14px;
    border: none;
    outline: none;
    z-index: 1;
    text-overflow: ellipsis;
    border-radius: 6px;
}
.input[type="number"]::-webkit-outer-spin-button,
.input[type="number"]::-webkit-inner-spin-button {
    appearance: none;
}

.input[readonly] {
    cursor: default;
}

.input:disabled {
    background: #ebebeb;
    cursor: not-allowed;
    color: #000;
    opacity: 0.7;
}

.input.select {
    padding: 13px 14px;
    margin-right: 5px;
}

.input.textarea {
    resize: vertical;
}
.input.textarea::-webkit-resizer {
    display: none;
}

.loading {
    position: relative;
    margin: 0 15px;
    width: 24px;
    height: 24px;
}
.loading:before {
    position: absolute;
    display: block;
    content: "";
    z-index: 12;
    top: 2px;
    left: 2px;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background-color: #fff;
}

.loading:after {
    position: absolute;
    display: block;
    content: "";
    z-index: 11;
    width: 12px;
    height: 12px;
    border-radius: 200px 0 0;
    background: linear-gradient(45deg, rgba(0, 0, 0, 0) 0, rgba(69, 154, 215, 1) 50%, rgba(69, 154, 215, 1) 100%);
    animation: loading 0.5s linear infinite;
}
@keyframes loading {
    0% {
        transform-origin: 100% 100%;
        transform: rotate(0deg);
    }

    100% {
        transform-origin: 100% 100%;
        transform: rotate(360deg);
    }
}

.checkbox {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: flex-start;
    gap: 8px;
    box-sizing: border-box;
    font-size: 1rem;
    line-height: 1.4375em;
    user-select: none;
}

.checkbox input,
.checkbox label {
    margin: 0;
    cursor: pointer !important;
}
